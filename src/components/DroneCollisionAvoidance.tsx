import { useState, useEffect } from 'react'
import { useKV } from '@github/spark/hooks'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Progress } from '@/components/ui/progress'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Separator } from '@/components/ui/separator'
import { toast } from 'sonner'
import {
  Shield,
  Warning,
  Activity,
  ArrowsOutCardinal,
  Target,
  Clock,
  MapPin,
  Users,
  Lightning,
  Radar,
  CircleNotch,
  CheckCircle,
  X,
  Play,
  Pause,
  Settings,
  Brain,
  Eye,
  Signal,
  Path,
  Network,
  AlertTriangle,
  Ban,
  Navigation,
  Crosshair,
  Timer,
  Strategy,
  FlowArrow,
  Drone,
  CaretRight,
  CaretLeft,
  Minus,
  Plus
} from '@phosphor-icons/react'

interface DroneCollisionRisk {
  id: string
  droneA: string
  droneB: string
  riskLevel: 'niedrig' | 'mittel' | 'hoch' | 'kritisch'
  distance: number
  relativeSpeed: number
  predictedCollisionTime: number | null
  avoidanceAction: 'none' | 'altitude-change' | 'route-deviation' | 'speed-adjustment' | 'emergency-stop'
  status: 'überwacht' | 'ausweichend' | 'aufgelöst' | 'eskaliert'
  position: { lat: number; lng: number; altitude: number }
  detectionTime: string
  resolved: boolean
}

interface AvoidanceAlgorithm {
  id: string
  name: string
  description: string
  type: 'predictive' | 'reactive' | 'collective' | 'ai-adaptive'
  responseTime: number
  accuracy: number
  energyEfficiency: number
  enabled: boolean
  priority: number
  scenarios: string[]
  parameters: {
    safetyDistance: number
    predictionHorizon: number
    maxDeviationAngle: number
    speedAdjustmentRange: number
  }
}

interface CollisionEvent {
  id: string
  timestamp: string
  eventType: 'near-miss' | 'avoided-collision' | 'emergency-maneuver' | 'algorithm-trigger'
  dronesInvolved: string[]
  riskLevel: 'niedrig' | 'mittel' | 'hoch' | 'kritisch'
  algorithmsTriggered: string[]
  outcome: 'erfolgreich' | 'teilweise' | 'unvollständig'
  responseTime: number
  energyCost: number
  missionImpact: 'minimal' | 'gering' | 'moderat' | 'signifikant'
  lessons: string
}

interface SafetyZone {
  id: string
  name: string
  center: { lat: number; lng: number; altitude: number }
  radius: number
  restrictionLevel: 'warnung' | 'geschwindigkeit-begrenzt' | 'umleitung-erforderlich' | 'sperrzone'
  activeUntil: string
  reason: string
  affectedDrones: string[]
  autoGenerated: boolean
}

interface SwarmCoordination {
  id: string
  swarmSize: number
  formationType: 'linear' | 'grid' | 'circle' | 'adaptive'
  safetyBuffer: number
  communicationLatency: number
  syncAccuracy: number
  collisionRisk: number
  lastOptimization: string
  algorithms: string[]
  performance: {
    collisionAvoidanceSuccess: number
    averageResponseTime: number
    energyEfficiency: number
    missionCompletionRate: number
  }
}

function DroneCollisionAvoidance() {
  const [collisionRisks, setCollisionRisks] = useKV<DroneCollisionRisk[]>('collision-risks', [
    {
      id: 'RISK-001',
      droneA: 'CD-BETA',
      droneB: 'CD-GAMMA',
      riskLevel: 'mittel',
      distance: 45.2,
      relativeSpeed: 12.3,
      predictedCollisionTime: 32.7,
      avoidanceAction: 'altitude-change',
      status: 'ausweichend',
      position: { lat: 52.5215, lng: 13.4080, altitude: 150 },
      detectionTime: new Date(Date.now() - 15000).toISOString(),
      resolved: false
    },
    {
      id: 'RISK-002',
      droneA: 'CD-ALPHA',
      droneB: 'CD-EPSILON',
      riskLevel: 'niedrig',
      distance: 78.5,
      relativeSpeed: 8.1,
      predictedCollisionTime: null,
      avoidanceAction: 'none',
      status: 'überwacht',
      position: { lat: 52.5205, lng: 13.4065, altitude: 160 },
      detectionTime: new Date(Date.now() - 45000).toISOString(),
      resolved: false
    }
  ])

  const [avoidanceAlgorithms, setAvoidanceAlgorithms] = useKV<AvoidanceAlgorithm[]>('avoidance-algorithms', [
    {
      id: 'PRED-VEL',
      name: 'Predictive Velocity Vector',
      description: 'Berechnet Kollisionswahrscheinlichkeiten basierend auf Geschwindigkeitsvektoren',
      type: 'predictive',
      responseTime: 250,
      accuracy: 94.2,
      energyEfficiency: 88.5,
      enabled: true,
      priority: 1,
      scenarios: ['hohe-geschwindigkeit', 'parallel-flug', 'kreuzende-routen'],
      parameters: {
        safetyDistance: 50,
        predictionHorizon: 30,
        maxDeviationAngle: 45,
        speedAdjustmentRange: 30
      }
    },
    {
      id: 'REACT-PROX',
      name: 'Reactive Proximity Alert',
      description: 'Sofortige Reaktion bei Unterschreitung kritischer Abstände',
      type: 'reactive',
      responseTime: 80,
      accuracy: 89.7,
      energyEfficiency: 92.1,
      enabled: true,
      priority: 2,
      scenarios: ['notfall', 'sensor-ausfall', 'unvorhergesehene-hindernisse'],
      parameters: {
        safetyDistance: 25,
        predictionHorizon: 5,
        maxDeviationAngle: 90,
        speedAdjustmentRange: 50
      }
    },
    {
      id: 'COLL-SWARM',
      name: 'Collective Swarm Intelligence',
      description: 'Schwarm-basierte Kollisionsvermeidung durch geteilte Intelligenz',
      type: 'collective',
      responseTime: 180,
      accuracy: 96.8,
      energyEfficiency: 85.3,
      enabled: true,
      priority: 3,
      scenarios: ['große-schwärme', 'komplexe-formationen', 'adaptive-missionen'],
      parameters: {
        safetyDistance: 40,
        predictionHorizon: 20,
        maxDeviationAngle: 60,
        speedAdjustmentRange: 25
      }
    },
    {
      id: 'AI-ADAPT',
      name: 'AI-Adaptive Avoidance',
      description: 'Selbstlernende KI optimiert Vermeidungsstrategien in Echtzeit',
      type: 'ai-adaptive',
      responseTime: 320,
      accuracy: 98.4,
      energyEfficiency: 91.7,
      enabled: true,
      priority: 4,
      scenarios: ['unbekannte-situationen', 'wetterbedingte-störungen', 'system-anomalien'],
      parameters: {
        safetyDistance: 60,
        predictionHorizon: 45,
        maxDeviationAngle: 30,
        speedAdjustmentRange: 40
      }
    }
  ])

  const [recentEvents, setRecentEvents] = useKV<CollisionEvent[]>('collision-events', [
    {
      id: 'EVENT-001',
      timestamp: new Date(Date.now() - 300000).toISOString(),
      eventType: 'avoided-collision',
      dronesInvolved: ['CD-BETA', 'CD-GAMMA'],
      riskLevel: 'hoch',
      algorithmsTriggered: ['PRED-VEL', 'REACT-PROX'],
      outcome: 'erfolgreich',
      responseTime: 180,
      energyCost: 12.3,
      missionImpact: 'gering',
      lessons: 'Höhenverstellung effektiver als Routenumleitung bei parallelem Flug'
    },
    {
      id: 'EVENT-002',
      timestamp: new Date(Date.now() - 600000).toISOString(),
      eventType: 'near-miss',
      dronesInvolved: ['CD-ALPHA', 'CD-DELTA'],
      riskLevel: 'mittel',
      algorithmsTriggered: ['COLL-SWARM'],
      outcome: 'erfolgreich',
      responseTime: 95,
      energyCost: 8.7,
      missionImpact: 'minimal',
      lessons: 'Schwarm-Koordination verhinderte kritische Situation'
    }
  ])

  const [safetyZones, setSafetyZones] = useKV<SafetyZone[]>('safety-zones', [
    {
      id: 'ZONE-001',
      name: 'Tempräre Sperrzone - Wartungsarbeiten',
      center: { lat: 52.5220, lng: 13.4100, altitude: 0 },
      radius: 200,
      restrictionLevel: 'sperrzone',
      activeUntil: new Date(Date.now() + 3600000).toISOString(),
      reason: 'Gleisbauarbeiten mit Kran-Aktivität',
      affectedDrones: ['CD-GAMMA', 'CD-EPSILON'],
      autoGenerated: false
    },
    {
      id: 'ZONE-002',
      name: 'Windböen-Warnung',
      center: { lat: 52.5180, lng: 13.4030, altitude: 0 },
      radius: 150,
      restrictionLevel: 'geschwindigkeit-begrenzt',
      activeUntil: new Date(Date.now() + 1800000).toISOString(),
      reason: 'Starke Windböen bis 45 km/h',
      affectedDrones: ['CD-ALPHA', 'CD-BETA'],
      autoGenerated: true
    }
  ])

  const [swarmCoordination, setSwarmCoordination] = useKV<SwarmCoordination>('swarm-coordination', {
    id: 'SWARM-MAIN',
    swarmSize: 5,
    formationType: 'adaptive',
    safetyBuffer: 45,
    communicationLatency: 12,
    syncAccuracy: 97.3,
    collisionRisk: 3.2,
    lastOptimization: new Date(Date.now() - 180000).toISOString(),
    algorithms: ['PRED-VEL', 'REACT-PROX', 'COLL-SWARM', 'AI-ADAPT'],
    performance: {
      collisionAvoidanceSuccess: 99.7,
      averageResponseTime: 145,
      energyEfficiency: 89.6,
      missionCompletionRate: 96.8
    }
  })

  const [systemStats] = useKV('collision-stats', {
    totalRisksDetected: 1247,
    collisionsAvoided: 1243,
    averageResponseTime: 165,
    energyOptimization: 91.2,
    algorithmSuccessRate: 97.8,
    missionContinuity: 98.5
  })

  const getRiskLevelColor = (level: string) => {
    switch (level) {
      case 'niedrig': return 'bg-green-500'
      case 'mittel': return 'bg-yellow-500'
      case 'hoch': return 'bg-orange-500'
      case 'kritisch': return 'bg-red-500'
      default: return 'bg-gray-500'
    }
  }

  const getAlgorithmTypeColor = (type: string) => {
    switch (type) {
      case 'predictive': return 'bg-blue-500'
      case 'reactive': return 'bg-orange-500'
      case 'collective': return 'bg-purple-500'
      case 'ai-adaptive': return 'bg-green-500'
      default: return 'bg-gray-500'
    }
  }

  const resolveCollisionRisk = (riskId: string, success: boolean) => {
    setCollisionRisks(prev => prev.map(risk => 
      risk.id === riskId 
        ? { 
            ...risk, 
            status: success ? 'aufgelöst' : 'eskaliert',
            resolved: success
          }
        : risk
    ))

    if (success) {
      // Neues Event hinzufügen
      const newEvent: CollisionEvent = {
        id: `EVENT-${Date.now()}`,
        timestamp: new Date().toISOString(),
        eventType: 'avoided-collision',
        dronesInvolved: [risk?.droneA || '', risk?.droneB || ''].filter(Boolean),
        riskLevel: risk?.riskLevel || 'niedrig',
        algorithmsTriggered: ['PRED-VEL'],
        outcome: 'erfolgreich',
        responseTime: Math.random() * 200 + 100,
        energyCost: Math.random() * 15 + 5,
        missionImpact: 'gering',
        lessons: 'Automatische Kollisionsvermeidung erfolgreich'
      }
      setRecentEvents(prev => [newEvent, ...prev.slice(0, 9)])
      toast.success('Kollisionsrisiko erfolgreich aufgelöst')
    } else {
      toast.error('Kollisionsrisiko eskaliert - manuelle Intervention erforderlich')
    }

    const risk = collisionRisks.find(r => r.id === riskId)
  }

  const toggleAlgorithm = (algorithmId: string) => {
    setAvoidanceAlgorithms(prev => prev.map(algo => 
      algo.id === algorithmId 
        ? { ...algo, enabled: !algo.enabled }
        : algo
    ))

    const algorithm = avoidanceAlgorithms.find(a => a.id === algorithmId)
    toast.info(`${algorithm?.name} ${algorithm?.enabled ? 'deaktiviert' : 'aktiviert'}`)
  }

  const optimizeSwarmFormation = () => {
    setSwarmCoordination(prev => ({
      ...prev,
      safetyBuffer: Math.min(prev.safetyBuffer + 5, 80),
      collisionRisk: Math.max(prev.collisionRisk - 0.5, 0.1),
      syncAccuracy: Math.min(prev.syncAccuracy + 1.2, 100),
      lastOptimization: new Date().toISOString(),
      performance: {
        ...prev.performance,
        collisionAvoidanceSuccess: Math.min(prev.performance.collisionAvoidanceSuccess + 0.3, 100),
        averageResponseTime: Math.max(prev.performance.averageResponseTime - 10, 50)
      }
    }))

    toast.success('Schwarm-Formation KI-optimiert')
  }

  const createEmergencySafetyZone = (lat: number, lng: number, reason: string) => {
    const newZone: SafetyZone = {
      id: `EMERG-${Date.now()}`,
      name: `Notfall-Sperrzone - ${reason}`,
      center: { lat, lng, altitude: 0 },
      radius: 100,
      restrictionLevel: 'sperrzone',
      activeUntil: new Date(Date.now() + 1800000).toISOString(),
      reason,
      affectedDrones: [],
      autoGenerated: true
    }

    setSafetyZones(prev => [...prev, newZone])
    toast.warning('Notfall-Sperrzone aktiviert')
  }

  const adjustAlgorithmParameters = (algorithmId: string, parameter: string, delta: number) => {
    setAvoidanceAlgorithms(prev => prev.map(algo => 
      algo.id === algorithmId 
        ? {
            ...algo,
            parameters: {
              ...algo.parameters,
              [parameter]: Math.max(algo.parameters[parameter as keyof typeof algo.parameters] + delta, 0)
            }
          }
        : algo
    ))

    toast.info('Algorithmus-Parameter angepasst')
  }

  const simulateCollisionScenario = () => {
    // Simuliere neues Kollisionsrisiko
    const newRisk: DroneCollisionRisk = {
      id: `SIM-${Date.now()}`,
      droneA: 'CD-ALPHA',
      droneB: 'CD-DELTA',
      riskLevel: 'hoch',
      distance: 30.5,
      relativeSpeed: 18.7,
      predictedCollisionTime: 15.2,
      avoidanceAction: 'emergency-stop',
      status: 'ausweichend',
      position: { lat: 52.5200, lng: 13.4050, altitude: 145 },
      detectionTime: new Date().toISOString(),
      resolved: false
    }

    setCollisionRisks(prev => [...prev, newRisk])
    toast.warning('Kollisionsszenario simuliert - Teste Algorithmus-Reaktion')

    // Automatisch nach 3 Sekunden lösen
    setTimeout(() => {
      resolveCollisionRisk(newRisk.id, true)
    }, 3000)
  }

  const criticalRisks = collisionRisks.filter(r => r.riskLevel === 'kritisch' && !r.resolved).length
  const activeRisks = collisionRisks.filter(r => !r.resolved).length
  const enabledAlgorithms = avoidanceAlgorithms.filter(a => a.enabled).length

  return (
    <div className="space-y-6 p-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-foreground mb-2">Echtzeit-Kollisionsvermeidung</h1>
          <p className="text-muted-foreground">
            KI-gesteuerte Sicherheitssysteme für koordinierte Drohnen-Schwärme
          </p>
        </div>
        <div className="flex gap-2">
          <Button onClick={simulateCollisionScenario} variant="outline" size="sm">
            <Brain size={16} className="mr-2" />
            Szenario testen
          </Button>
          <Button onClick={optimizeSwarmFormation} size="sm">
            <Strategy size={16} className="mr-2" />
            Formation optimieren
          </Button>
          <Button 
            onClick={() => createEmergencySafetyZone(52.5200, 13.4050, 'Test-Notfall')} 
            variant="destructive" 
            size="sm"
          >
            <Shield size={16} className="mr-2" />
            Notfall-Zone
          </Button>
        </div>
      </div>

      {/* Sicherheits-Übersicht */}
      <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-red-500/10 rounded-lg flex items-center justify-center">
                <AlertTriangle size={20} className="text-red-600" />
              </div>
              <div>
                <p className="text-2xl font-bold text-red-600">{criticalRisks}</p>
                <p className="text-sm text-muted-foreground">Kritische Risiken</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-orange-500/10 rounded-lg flex items-center justify-center">
                <Warning size={20} className="text-orange-600" />
              </div>
              <div>
                <p className="text-2xl font-bold">{activeRisks}</p>
                <p className="text-sm text-muted-foreground">Aktive Risiken</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-green-500/10 rounded-lg flex items-center justify-center">
                <CheckCircle size={20} className="text-green-600" />
              </div>
              <div>
                <p className="text-2xl font-bold">{systemStats.collisionsAvoided}</p>
                <p className="text-sm text-muted-foreground">Vermiedene Kollisionen</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-blue-500/10 rounded-lg flex items-center justify-center">
                <Brain size={20} className="text-blue-600" />
              </div>
              <div>
                <p className="text-2xl font-bold">{enabledAlgorithms}/4</p>
                <p className="text-sm text-muted-foreground">Aktive Algorithmen</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-purple-500/10 rounded-lg flex items-center justify-center">
                <Clock size={20} className="text-purple-600" />
              </div>
              <div>
                <p className="text-2xl font-bold">{systemStats.averageResponseTime}ms</p>
                <p className="text-sm text-muted-foreground">Reaktionszeit</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-green-500/10 rounded-lg flex items-center justify-center">
                <Shield size={20} className="text-green-600" />
              </div>
              <div>
                <p className="text-2xl font-bold">{systemStats.algorithmSuccessRate}%</p>
                <p className="text-sm text-muted-foreground">Erfolgsrate</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Kritische Alarme */}
      {criticalRisks > 0 && (
        <Alert className="border-destructive bg-destructive/5">
          <AlertTriangle className="h-4 w-4 text-destructive" />
          <AlertDescription className="text-destructive">
            <strong>KRITISCHE KOLLISIONSRISIKEN ERKANNT:</strong> {criticalRisks} Drohnen benötigen sofortige Aufmerksamkeit.
          </AlertDescription>
        </Alert>
      )}

      <Tabs defaultValue="risks" className="space-y-6">
        <TabsList className="grid w-full grid-cols-6">
          <TabsTrigger value="risks">Aktive Risiken</TabsTrigger>
          <TabsTrigger value="algorithms">Algorithmen</TabsTrigger>
          <TabsTrigger value="events">Ereignis-Log</TabsTrigger>
          <TabsTrigger value="zones">Sicherheitszonen</TabsTrigger>
          <TabsTrigger value="coordination">Schwarm-Koordination</TabsTrigger>
          <TabsTrigger value="analytics">Performance-Analyse</TabsTrigger>
        </TabsList>

        <TabsContent value="risks" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {collisionRisks.filter(r => !r.resolved).map((risk) => (
              <Card key={risk.id} className={risk.riskLevel === 'kritisch' ? 'border-destructive' : ''}>
                <CardHeader className="pb-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className={`w-4 h-4 rounded-full ${getRiskLevelColor(risk.riskLevel)}`}></div>
                      <div>
                        <CardTitle className="text-lg">Kollisionsrisiko {risk.id}</CardTitle>
                        <CardDescription>
                          {risk.droneA} ↔ {risk.droneB} • Status: {risk.status}
                        </CardDescription>
                      </div>
                    </div>
                    <Badge variant={risk.riskLevel === 'kritisch' ? 'destructive' : 'default'} className="capitalize">
                      {risk.riskLevel}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Risiko-Metriken */}
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span>Aktueller Abstand</span>
                        <span className="font-mono font-bold">{risk.distance.toFixed(1)}m</span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span>Relative Geschwindigkeit</span>
                        <span className="font-mono">{risk.relativeSpeed.toFixed(1)} km/h</span>
                      </div>
                    </div>
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span>Kollisionszeit</span>
                        <span className="font-mono font-bold text-red-600">
                          {risk.predictedCollisionTime ? `${risk.predictedCollisionTime.toFixed(1)}s` : 'N/A'}
                        </span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span>Erkannt vor</span>
                        <span className="font-mono">
                          {Math.floor((Date.now() - new Date(risk.detectionTime).getTime()) / 1000)}s
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Position und Ausweichmanöver */}
                  <div className="space-y-2">
                    <h4 className="text-sm font-medium">Ausweichmanöver</h4>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <span className="text-muted-foreground">Aktion:</span>
                        <p className="capitalize font-medium">{risk.avoidanceAction.replace('-', ' ')}</p>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Position:</span>
                        <p className="font-mono text-xs">
                          {risk.position.lat.toFixed(4)}, {risk.position.lng.toFixed(4)}
                        </p>
                      </div>
                    </div>
                  </div>

                  {/* Fortschrittsanzeige für aktive Ausweichmanöver */}
                  {risk.status === 'ausweichend' && risk.predictedCollisionTime && (
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span>Ausweichprogress</span>
                        <span>Geschätzte Auflösung in {Math.max(risk.predictedCollisionTime - 5, 2).toFixed(0)}s</span>
                      </div>
                      <Progress 
                        value={Math.max(100 - (risk.predictedCollisionTime / 30 * 100), 20)} 
                        className="h-2"
                      />
                    </div>
                  )}

                  {/* Aktionen */}
                  <div className="flex gap-2 pt-2">
                    <Button 
                      size="sm" 
                      onClick={() => resolveCollisionRisk(risk.id, true)}
                      disabled={risk.status === 'aufgelöst'}
                    >
                      <CheckCircle size={14} className="mr-1" />
                      Auflösen
                    </Button>
                    <Button 
                      size="sm" 
                      variant="outline"
                      onClick={() => resolveCollisionRisk(risk.id, false)}
                    >
                      <X size={14} className="mr-1" />
                      Eskalieren
                    </Button>
                    <Button 
                      size="sm" 
                      variant="outline"
                      onClick={() => createEmergencySafetyZone(risk.position.lat, risk.position.lng, 'Kollisionsrisiko')}
                    >
                      <Shield size={14} className="mr-1" />
                      Sperrzone
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {collisionRisks.filter(r => !r.resolved).length === 0 && (
            <div className="text-center py-12">
              <CheckCircle size={48} className="mx-auto text-green-500 mb-4" />
              <h3 className="text-lg font-semibold text-muted-foreground mb-2">
                Keine aktiven Kollisionsrisiken
              </h3>
              <p className="text-sm text-muted-foreground mb-4">
                Alle Drohnen befinden sich in sicheren Abständen zueinander
              </p>
              <Button onClick={simulateCollisionScenario} variant="outline">
                <Brain size={16} className="mr-2" />
                Test-Szenario starten
              </Button>
            </div>
          )}
        </TabsContent>

        <TabsContent value="algorithms" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {avoidanceAlgorithms.map((algorithm) => (
              <Card key={algorithm.id}>
                <CardHeader className="pb-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className={`w-4 h-4 rounded-full ${getAlgorithmTypeColor(algorithm.type)} ${algorithm.enabled ? '' : 'opacity-30'}`}></div>
                      <div>
                        <CardTitle className="text-lg">{algorithm.name}</CardTitle>
                        <CardDescription className="capitalize">{algorithm.type.replace('-', ' ')}</CardDescription>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge variant="outline" className="text-xs">
                        Priorität {algorithm.priority}
                      </Badge>
                      <Button
                        size="sm"
                        variant={algorithm.enabled ? "default" : "outline"}
                        onClick={() => toggleAlgorithm(algorithm.id)}
                      >
                        {algorithm.enabled ? <Pause size={14} /> : <Play size={14} />}
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-sm text-muted-foreground">{algorithm.description}</p>

                  {/* Performance-Metriken */}
                  <div className="grid grid-cols-3 gap-4 text-sm">
                    <div className="text-center space-y-1">
                      <div className="text-lg font-bold text-blue-600">{algorithm.responseTime}ms</div>
                      <div className="text-xs text-muted-foreground">Reaktionszeit</div>
                    </div>
                    <div className="text-center space-y-1">
                      <div className="text-lg font-bold text-green-600">{algorithm.accuracy}%</div>
                      <div className="text-xs text-muted-foreground">Genauigkeit</div>
                    </div>
                    <div className="text-center space-y-1">
                      <div className="text-lg font-bold text-purple-600">{algorithm.energyEfficiency}%</div>
                      <div className="text-xs text-muted-foreground">Energieeffizienz</div>
                    </div>
                  </div>

                  {/* Parameter-Kontrollen */}
                  <div className="space-y-3">
                    <h4 className="text-sm font-medium">Parameter</h4>
                    
                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <span className="text-sm">Sicherheitsabstand</span>
                        <div className="flex items-center gap-2">
                          <Button 
                            size="sm" 
                            variant="outline" 
                            onClick={() => adjustAlgorithmParameters(algorithm.id, 'safetyDistance', -5)}
                            disabled={!algorithm.enabled}
                          >
                            <Minus size={12} />
                          </Button>
                          <span className="font-mono text-sm w-12 text-center">
                            {algorithm.parameters.safetyDistance}m
                          </span>
                          <Button 
                            size="sm" 
                            variant="outline" 
                            onClick={() => adjustAlgorithmParameters(algorithm.id, 'safetyDistance', 5)}
                            disabled={!algorithm.enabled}
                          >
                            <Plus size={12} />
                          </Button>
                        </div>
                      </div>

                      <div className="flex justify-between items-center">
                        <span className="text-sm">Vorhersage-Horizont</span>
                        <div className="flex items-center gap-2">
                          <Button 
                            size="sm" 
                            variant="outline" 
                            onClick={() => adjustAlgorithmParameters(algorithm.id, 'predictionHorizon', -5)}
                            disabled={!algorithm.enabled}
                          >
                            <Minus size={12} />
                          </Button>
                          <span className="font-mono text-sm w-12 text-center">
                            {algorithm.parameters.predictionHorizon}s
                          </span>
                          <Button 
                            size="sm" 
                            variant="outline" 
                            onClick={() => adjustAlgorithmParameters(algorithm.id, 'predictionHorizon', 5)}
                            disabled={!algorithm.enabled}
                          >
                            <Plus size={12} />
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Szenarien */}
                  <div className="space-y-2">
                    <h4 className="text-sm font-medium">Optimiert für Szenarien</h4>
                    <div className="flex flex-wrap gap-1">
                      {algorithm.scenarios.map((scenario) => (
                        <Badge key={scenario} variant="outline" className="text-xs">
                          {scenario.replace('-', ' ')}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="events" className="space-y-4">
          <div className="space-y-4">
            {recentEvents.map((event) => (
              <Card key={event.id}>
                <CardContent className="p-4">
                  <div className="flex items-start justify-between">
                    <div className="flex items-start gap-3">
                      <div className={`w-3 h-3 rounded-full mt-2 ${getRiskLevelColor(event.riskLevel)}`}></div>
                      <div className="space-y-2">
                        <div>
                          <h4 className="font-medium capitalize">{event.eventType.replace('-', ' ')}</h4>
                          <p className="text-sm text-muted-foreground">
                            {new Date(event.timestamp).toLocaleString()} • 
                            Drohnen: {event.dronesInvolved.join(', ')}
                          </p>
                        </div>
                        
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                          <div>
                            <span className="text-muted-foreground">Reaktionszeit:</span>
                            <p className="font-mono font-bold">{event.responseTime}ms</p>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Energiekosten:</span>
                            <p className="font-mono">{event.energyCost.toFixed(1)} kWh</p>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Mission-Impact:</span>
                            <p className="capitalize">{event.missionImpact}</p>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Ergebnis:</span>
                            <Badge 
                              variant={event.outcome === 'erfolgreich' ? 'default' : 'destructive'}
                              className="text-xs capitalize"
                            >
                              {event.outcome}
                            </Badge>
                          </div>
                        </div>

                        <div className="space-y-1">
                          <span className="text-sm text-muted-foreground">Ausgelöste Algorithmen:</span>
                          <div className="flex flex-wrap gap-1">
                            {event.algorithmsTriggered.map((algoId) => {
                              const algo = avoidanceAlgorithms.find(a => a.id === algoId)
                              return (
                                <Badge key={algoId} variant="outline" className="text-xs">
                                  {algo?.name || algoId}
                                </Badge>
                              )
                            })}
                          </div>
                        </div>

                        <div className="space-y-1">
                          <span className="text-sm text-muted-foreground">Erkenntnisse:</span>
                          <p className="text-sm italic">{event.lessons}</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {recentEvents.length === 0 && (
            <div className="text-center py-12">
              <Activity size={48} className="mx-auto text-muted-foreground mb-4" />
              <h3 className="text-lg font-semibold text-muted-foreground mb-2">
                Keine Ereignisse protokolliert
              </h3>
              <p className="text-sm text-muted-foreground">
                Kollisionsvermeidungs-Ereignisse werden hier angezeigt
              </p>
            </div>
          )}
        </TabsContent>

        <TabsContent value="zones" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {safetyZones.map((zone) => (
              <Card key={zone.id}>
                <CardHeader className="pb-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle className="text-lg">{zone.name}</CardTitle>
                      <CardDescription>
                        Radius: {zone.radius}m • {zone.autoGenerated ? 'Automatisch' : 'Manuell'} erstellt
                      </CardDescription>
                    </div>
                    <Badge 
                      variant={zone.restrictionLevel === 'sperrzone' ? 'destructive' : 'default'}
                      className="capitalize"
                    >
                      {zone.restrictionLevel.replace('-', ' ')}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Grund:</span>
                      <span className="text-right max-w-48">{zone.reason}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Aktiv bis:</span>
                      <span className="font-mono">{new Date(zone.activeUntil).toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Position:</span>
                      <span className="font-mono text-xs">
                        {zone.center.lat.toFixed(4)}, {zone.center.lng.toFixed(4)}
                      </span>
                    </div>
                  </div>

                  {zone.affectedDrones.length > 0 && (
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium">Betroffene Drohnen</h4>
                      <div className="flex flex-wrap gap-1">
                        {zone.affectedDrones.map((droneId) => (
                          <Badge key={droneId} variant="secondary" className="text-xs font-mono">
                            {droneId}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  )}

                  <div className="flex gap-2 pt-2">
                    <Button size="sm" variant="outline">
                      <Settings size={14} className="mr-1" />
                      Bearbeiten
                    </Button>
                    <Button size="sm" variant="outline">
                      <Eye size={14} className="mr-1" />
                      Anzeigen
                    </Button>
                    <Button 
                      size="sm" 
                      variant="destructive"
                      onClick={() => setSafetyZones(prev => prev.filter(z => z.id !== zone.id))}
                    >
                      <X size={14} className="mr-1" />
                      Aufheben
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="coordination" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Schwarm-Koordinations-Status</CardTitle>
              <CardDescription>
                Echtzeit-Überwachung der Kollisionsvermeidung im Schwarm-Verhalten
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Schwarm-Metriken */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center space-y-2">
                  <div className="text-2xl font-bold text-blue-600">
                    {swarmCoordination.swarmSize}
                  </div>
                  <div className="text-sm text-muted-foreground">Schwarm-Größe</div>
                </div>
                <div className="text-center space-y-2">
                  <div className="text-2xl font-bold text-green-600">
                    {swarmCoordination.safetyBuffer}m
                  </div>
                  <div className="text-sm text-muted-foreground">Sicherheitspuffer</div>
                </div>
                <div className="text-center space-y-2">
                  <div className="text-2xl font-bold text-purple-600">
                    {swarmCoordination.syncAccuracy}%
                  </div>
                  <div className="text-sm text-muted-foreground">Sync-Genauigkeit</div>
                </div>
                <div className="text-center space-y-2">
                  <div className="text-2xl font-bold text-orange-600">
                    {swarmCoordination.collisionRisk.toFixed(1)}%
                  </div>
                  <div className="text-sm text-muted-foreground">Kollisionsrisiko</div>
                </div>
              </div>

              <Separator />

              {/* Formation und Kommunikation */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-3">
                  <h4 className="font-medium">Formation & Kommunikation</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>Formationstyp:</span>
                      <span className="capitalize font-medium">{swarmCoordination.formationType}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Kommunikations-Latenz:</span>
                      <span className="font-mono">{swarmCoordination.communicationLatency}ms</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Letzte Optimierung:</span>
                      <span className="font-mono text-xs">
                        {new Date(swarmCoordination.lastOptimization).toLocaleTimeString()}
                      </span>
                    </div>
                  </div>
                </div>

                <div className="space-y-3">
                  <h4 className="font-medium">Performance-Indikatoren</h4>
                  <div className="space-y-2">
                    <div className="space-y-1">
                      <div className="flex justify-between text-sm">
                        <span>Kollisionsvermeidung</span>
                        <span>{swarmCoordination.performance.collisionAvoidanceSuccess}%</span>
                      </div>
                      <Progress value={swarmCoordination.performance.collisionAvoidanceSuccess} className="h-2" />
                    </div>
                    <div className="space-y-1">
                      <div className="flex justify-between text-sm">
                        <span>Energieeffizienz</span>
                        <span>{swarmCoordination.performance.energyEfficiency}%</span>
                      </div>
                      <Progress value={swarmCoordination.performance.energyEfficiency} className="h-2" />
                    </div>
                  </div>
                </div>
              </div>

              {/* Aktive Algorithmen */}
              <div className="space-y-3">
                <h4 className="font-medium">Aktive Sicherheits-Algorithmen</h4>
                <div className="flex flex-wrap gap-2">
                  {swarmCoordination.algorithms.map((algoId) => {
                    const algo = avoidanceAlgorithms.find(a => a.id === algoId)
                    return (
                      <Badge 
                        key={algoId} 
                        variant={algo?.enabled ? 'default' : 'secondary'}
                        className="text-xs"
                      >
                        {algo?.name || algoId}
                      </Badge>
                    )
                  })}
                </div>
              </div>

              <div className="flex gap-2 pt-4">
                <Button onClick={optimizeSwarmFormation}>
                  <Strategy size={16} className="mr-2" />
                  KI-Optimierung
                </Button>
                <Button variant="outline">
                  <Settings size={16} className="mr-2" />
                  Parameter anpassen
                </Button>
                <Button variant="outline">
                  <Eye size={16} className="mr-2" />
                  3D-Visualisierung
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="analytics" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card>
              <CardHeader className="pb-4">
                <CardTitle className="text-base">System-Performance</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-sm">Erkannte Risiken</span>
                  <span className="font-bold">{systemStats.totalRisksDetected}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">Vermiedene Kollisionen</span>
                  <span className="font-bold text-green-600">{systemStats.collisionsAvoided}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm">Erfolgsrate</span>
                  <span className="font-bold text-blue-600">{systemStats.algorithmSuccessRate}%</span>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-4">
                <CardTitle className="text-base">Reaktionszeiten</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span>Durchschnitt</span>
                    <span>{systemStats.averageResponseTime}ms</span>
                  </div>
                  <Progress 
                    value={Math.max(100 - (systemStats.averageResponseTime / 500 * 100), 0)} 
                    className="h-2"
                  />
                </div>
                <div className="flex justify-between text-sm">
                  <span>Ziel</span>
                  <span className="text-green-600">{'<200ms'}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span>Beste Zeit</span>
                  <span className="font-bold">45ms</span>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-4">
                <CardTitle className="text-base">Energie-Optimierung</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span>Effizienz-Score</span>
                    <span>{systemStats.energyOptimization}%</span>
                  </div>
                  <Progress value={systemStats.energyOptimization} className="h-2" />
                </div>
                <div className="flex justify-between text-sm">
                  <span>Missions-Kontinuität</span>
                  <span className="font-bold text-purple-600">{systemStats.missionContinuity}%</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span>Eingesparte Energie</span>
                  <span className="font-bold">247 kWh</span>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Algorithmus-Vergleich */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Algorithmus-Performance Vergleich</CardTitle>
              <CardDescription>Leistungsanalyse der verschiedenen Kollisionsvermeidungs-Algorithmen</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {avoidanceAlgorithms.map((algorithm) => (
                  <div key={algorithm.id} className="space-y-2">
                    <div className="flex justify-between items-center">
                      <div className="flex items-center gap-3">
                        <div className={`w-3 h-3 rounded-full ${getAlgorithmTypeColor(algorithm.type)}`}></div>
                        <h4 className="font-medium text-sm">{algorithm.name}</h4>
                        <Badge variant="outline" className="text-xs capitalize">
                          {algorithm.type.replace('-', ' ')}
                        </Badge>
                      </div>
                      <div className="text-sm font-mono">
                        {algorithm.accuracy}% • {algorithm.responseTime}ms
                      </div>
                    </div>
                    <div className="grid grid-cols-3 gap-2">
                      <div className="space-y-1">
                        <div className="text-xs text-muted-foreground">Genauigkeit</div>
                        <Progress value={algorithm.accuracy} className="h-1" />
                      </div>
                      <div className="space-y-1">
                        <div className="text-xs text-muted-foreground">Geschwindigkeit</div>
                        <Progress value={Math.max(100 - (algorithm.responseTime / 500 * 100), 0)} className="h-1" />
                      </div>
                      <div className="space-y-1">
                        <div className="text-xs text-muted-foreground">Effizienz</div>
                        <Progress value={algorithm.energyEfficiency} className="h-1" />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

export default DroneCollisionAvoidance